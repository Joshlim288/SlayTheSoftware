using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Contains data related to the Current User
/// </summary>
public static class CurrentUser
{
    public static User loggedIn = null;
    public static int currentWorldId=1;
    public static int currentSectionId=0;
    public static int currentLevelId=0;
	public static int currentScore=0;
    public static bool hasCompleted = false;
    public static string currentDifficulty = "";
    public static string sceneToLoad = "";
    public static int leaderorchallenge;
    public static string errorMessage = "";
}

/// <summary>
/// Contains data related to gameplay
/// </summary>
public static class GameData
{
    public static World[] campaignWorlds;
    public static World currentWorld;
    public static Question[] currentQuestions;
    public static Question currentQuestion;
    public static int bossCorrectQuestions;
    public static int bgMap;
    public static int levelScore;
    public static int correctCount;
}

/// <summary>
/// Contains data to be edited by the User
/// </summary>
public static class EditData
{
    public static World[] customWorldList;
    public static World customWorld;
    public static bool isCreate;
    public static Question editQuestion;
	public static Question[] customQuestions;
}

/// <summary>
/// Contains data for user scores
/// </summary>
public static class LeaderboardData
{
    public static Result[] leaderboard;
    public static Result userResult;
}

/// <summary>
/// Entity class describing a User
/// </summary>
public class User
{
    public int id;
    public string first_name;
    public string last_name;
    public string token;
}

/// <summary>
/// Entity class describing a unique position in a World
/// </summary>
public class Position
{
    public int world_id;
    public int section_id;
    public int level_id;
}

/// <summary>
/// Entity class describing a Question.
/// Also contains the related answers
/// </summary>
public class Question
{
    public int id;
    public string question;
    public Answer[] answers;
    public int record_id;
    public int? index;
    public bool? answered_correctly;
    public int points_change;

    public Question(string questionText, Answer[] answers)
    {
        this.question = questionText;
        this.answers = answers;
    }
}

/// <summary>
/// Entity class describing an answer to a question
/// </summary>
public class Answer
{
    public int id;
    public string answer;
    public bool is_correct;

    public Answer(string answerText, bool is_correct)
    {
        this.answer = answerText;
        this.is_correct = is_correct;
    }
}

/// <summary>
/// Entity class describing a World
/// Also contains sections that the World is composed of
/// </summary>
public class World
{
    public int id;
    public string world_name;
    public string topic;
    public bool is_custom_world;
    public int? index;
    public string access_code;
    public bool is_active;
    public string date_created;
    public string date_modified;
    public Section[] sections;

    public World(string world_name, string topic)
    {
        this.world_name = world_name;
        this.topic = topic;
    }
}

/// <summary>
/// Entity class describing a Section
/// Also contains Levels that the Section is composed of
/// </summary>
public class Section
{
    public int id;
    public string sub_topic_name;
    public int? index;
    public string date_created;
    public string date_modified;
    public int world;
    public Level[] levels;
}

/// <summary>
/// Entity class describing a Level
/// </summary>
public class Level
{
    public int id;
    public string level_name;
    public bool is_boss_level;
    public bool is_final_boss_level;
    public int? index;
    public string date_created;
    public string date_modified;
    public int section;
}

/// <summary>
/// Entity class describing a leaderboard of student Results
/// </summary>
public class LeaderboardResults
{
    public Result[] results;
}

/// <summary>
/// Entity class that describes a Student's Result and ranking for a specific World
/// </summary>
public class Result
{
    public int user_id;
    public string first_name;
    public string last_name;
    public int points;
    public int rank;

    //Constructor only to make test data for testing output =========================================================
    //To be deleted since results are generated by backend only
    public Result(int userIDInput, string firstNameInput, string lastNameInput, int pointsInput, int rankInput)
    {
        user_id = userIDInput;
        first_name = firstNameInput;
        last_name = lastNameInput;
        points = pointsInput;
        rank = rankInput;
    }
    //================================================================================================================
}